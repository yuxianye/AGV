<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:Solution.Desktop.Resource"
                    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

        <ResourceDictionary Source="pack://application:,,,/Solution.Desktop.Resource;component/ColorBrush.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Solution.Desktop.Resource;component/ShapeBrush.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Solution.Desktop.Resource;component/SingleValue.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Solution.Desktop.Resource;component/String.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <!--数据模板，给docker 的标题增加图标-->
    <DataTemplate x:Key="DockDocumentHeaderTemplate">
        <StackPanel Orientation="Horizontal">
            <Image Source="{Binding IconSource}"
                   Margin="0,0,4,0" />
            <TextBlock Text="{Binding Title}" />
        </StackPanel>
    </DataTemplate>

    <!--DataGrid样式  by Gaoj-->
    <!--<Style x:Key="DataGridStyle" TargetType="DataGrid" BasedOn="{StaticResource MetroDataGrid}">
        <Setter Property="BorderBrush" Value="LightBlue"/>
        <Setter Property="BorderThickness" Value="2,2,2,2"/>
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource GrayBrush10}" />
    </Style>-->

    <!--DataGridColumn Header样式：字体大小及位置等  by Gaoj-->
    <Style x:Key="DataGridColumnHeaderStyle"
           TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="FontSize"
                Value="{DynamicResource HeaderFontSize}" />
    </Style>

    <Style x:Key="SolutionCircleButtonStyle"
           BasedOn="{StaticResource MetroCircleButtonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource WhiteBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="CircleButtonStyle"
           BasedOn="{StaticResource SolutionCircleButtonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Width"
                Value="{StaticResource CircleButtonWidth}" />
        <Setter Property="Height"
                Value="{StaticResource CircleButtonHeight}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--分页控件的圆形按钮-->
    <Style x:Key="DataPageCircleButtonStyle"
           BasedOn="{StaticResource CircleButtonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="BorderBrush"
                Value="{DynamicResource AccentColorBrush2}" />
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
    </Style>





    <!--圆角图片按钮-->
    <!--  style for default button  -->
    <Style  TargetType="{x:Type local:ImageButton}">
        <Setter Property="Background"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource AccentColorBrush2}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Controls:ControlsHelper.ContentCharacterCasing"
                Value="Upper" />
        <Setter Property="Controls:ControlsHelper.CornerRadius"
                Value="3" />
        <Setter Property="FontFamily"
                Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontSize"
                Value="{DynamicResource FlatButtonFontSize}" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="Foreground"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="MinHeight"
                Value="25" />
        <Setter Property="Padding"
                Value="2 3" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="DisabledVisualElement"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                                IsHitTestVisible="False"
                                Opacity="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <StackPanel Orientation="Horizontal"
                                    HorizontalAlignment="Center">


                            <!--<Border Width="20"
                                    Height="20"
                                    Background="Yellow"></Border>-->
                            <Rectangle Margin="3 0 0 0"
                                       Width="16"
                                       Height="16"
                                       VerticalAlignment="Center">
                                <Rectangle.Fill>
                                    <ImageBrush ImageSource="{Binding IconPath, RelativeSource={RelativeSource TemplatedParent}}"
                                                Stretch="UniformToFill" />
                                    <!--<Brush  pa ImageSource="{Binding IconBrush, RelativeSource={RelativeSource TemplatedParent}}" />-->
                                </Rectangle.Fill>
                            </Rectangle>

                            <Controls:ContentControlEx x:Name="PART_ContentPresenter"
                                                       Margin="{TemplateBinding BorderThickness}"
                                                       Padding="{TemplateBinding Padding}"
                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       Content="{TemplateBinding Content}"
                                                       ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}"
                                                       ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                       RecognizesAccessKey="True"
                                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="2" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource BlackBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource AccentColorBrush4}" />
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="2" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                    Property="Opacity"
                                    Value="0.7" />
                            <Setter TargetName="PART_ContentPresenter"
                                    Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--圆角按钮-->
    <!--  style for default button  -->
    <Style  TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource AccentColorBrush2}" />
        <Setter Property="BorderThickness"
                Value="1" />
        <Setter Property="Controls:ControlsHelper.ContentCharacterCasing"
                Value="Upper" />
        <Setter Property="Controls:ControlsHelper.CornerRadius"
                Value="3" />
        <Setter Property="FontFamily"
                Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontSize"
                Value="{DynamicResource FlatButtonFontSize}" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="Foreground"
                Value="{DynamicResource WhiteBrush}" />
        <Setter Property="MinHeight"
                Value="25" />
        <Setter Property="Padding"
                Value="2 3" />
        <Setter Property="SnapsToDevicePixels"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="DisabledVisualElement"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.CornerRadius), Mode=OneWay}"
                                IsHitTestVisible="False"
                                Opacity="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Controls:ContentControlEx x:Name="PART_ContentPresenter"
                                                   Margin="{TemplateBinding BorderThickness}"
                                                   Padding="{TemplateBinding Padding}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Content="{TemplateBinding Content}"
                                                   ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ControlsHelper.ContentCharacterCasing)}"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                   RecognizesAccessKey="True"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="2" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource BlackBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource AccentColorBrush4}" />
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="2" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                    Property="Opacity"
                                    Value="0.7" />
                            <Setter TargetName="PART_ContentPresenter"
                                    Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style x:Key="AccentCircleButtonStyle"
           BasedOn="{StaticResource MahApps.Metro.Styles.MetroCircleButtonStyle}"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <!--TextBlockStyle 文本块样式-->
    <Style x:Key="TextBlockStyle"
           TargetType="{x:Type TextBlock}">
        <Setter Property="Margin"
                Value="{DynamicResource ControlMargin6}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
    </Style>

    <!--TextBlockStyle 文本块样式-->
    <Style x:Key="DataPageComboBoxStyle"
           BasedOn="{x:Null}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="Margin"
                Value="{DynamicResource ControlMargin6}" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="Width"
                Value="{DynamicResource DataPageComboBoxWidth}" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="Foreground"
                Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="BorderThickness"
                Value="{DynamicResource ControlDefaultMargin}" />

        <!--<Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="BorderBrush"
                        Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource GrayBrush7}" />
            </Trigger>
        </Style.Triggers>-->
    </Style>




    <!--<Style x:Key="SolutionSearchMetroTextBox"
           BasedOn="{StaticResource SearchMetroTextBox}"
           TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Controls:TextBoxHelper.HasText"
                     Value="True">
                <Setter Property="Controls:TextBoxHelper.ButtonContent"
                        Value="r" />
                <Setter Property="Controls:TextBoxHelper.ButtonContentTemplate"
                        Value="{x:Null}" />
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Storyboard x:Key="blinkAnimation"
                Duration="0:0:5">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)"
                                      Storyboard.TargetName="titleTextBlock"
                                      AutoReverse="True">
            <ColorAnimationUsingKeyFrames.KeyFrames>
                <DiscreteColorKeyFrame KeyTime="0:0:0"
                                       Value="White" />
                <DiscreteColorKeyFrame KeyTime="0:0:1"
                                       Value="Black" />
                <DiscreteColorKeyFrame KeyTime="0:0:2"
                                       Value="White" />
                <DiscreteColorKeyFrame KeyTime="0:0:3"
                                       Value="Black" />
                <DiscreteColorKeyFrame KeyTime="0:0:4"
                                       Value="White" />
            </ColorAnimationUsingKeyFrames.KeyFrames>
        </ColorAnimationUsingKeyFrames>

        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                      Storyboard.TargetName="titleTextBlock"
                                      AutoReverse="True">
            <ColorAnimationUsingKeyFrames.KeyFrames>
                <DiscreteColorKeyFrame KeyTime="0:0:0"
                                       Value="Black" />
                <DiscreteColorKeyFrame KeyTime="0:0:1"
                                       Value="White" />
                <DiscreteColorKeyFrame KeyTime="0:0:2"
                                       Value="Black" />
                <DiscreteColorKeyFrame KeyTime="0:0:3"
                                       Value="White" />
                <DiscreteColorKeyFrame KeyTime="0:0:4"
                                       Value="Black" />
            </ColorAnimationUsingKeyFrames.KeyFrames>
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="StarTextBlockStyle"
           TargetType="{x:Type TextBlock}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard Duration="0:0:5">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Background).(SolidColorBrush.Color)"
                                                          AutoReverse="True">
                                <ColorAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteColorKeyFrame KeyTime="0:0:0"
                                                           Value="White" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:1"
                                                           Value="Black" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:2"
                                                           Value="White" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:3"
                                                           Value="Black" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:4"
                                                           Value="White" />
                                </ColorAnimationUsingKeyFrames.KeyFrames>
                            </ColorAnimationUsingKeyFrames>

                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                                          AutoReverse="True">
                                <ColorAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteColorKeyFrame KeyTime="0:0:0"
                                                           Value="Black" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:1"
                                                           Value="White" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:2"
                                                           Value="Black" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:3"
                                                           Value="White" />
                                    <DiscreteColorKeyFrame KeyTime="0:0:4"
                                                           Value="Black" />
                                </ColorAnimationUsingKeyFrames.KeyFrames>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
                <!--<Trigger  Property="Controls:TextBoxHelper.HasText"
                          Value="True">
                    <Setter Property="Controls:TextBoxHelper.ButtonContent"
                            Value="r" />
                    <Setter Property="Controls:TextBoxHelper.ButtonContentTemplate"
                            Value="{x:Null}" />
                </Trigger>-->
            </EventTrigger>
            <!--<Trigger  Property="Controls:TextBoxHelper.HasText"
                     Value="True">
                <Setter Property="Controls:TextBoxHelper.ButtonContent"
                        Value="r" />
                <Setter Property="Controls:TextBoxHelper.ButtonContentTemplate"
                        Value="{x:Null}" />
            </Trigger>-->
        </Style.Triggers>
    </Style>
    <Style x:Key="Win8MetroPasswordBox"
           BasedOn="{StaticResource MetroButtonRevealedPasswordBox}"
           TargetType="{x:Type PasswordBox}">
        <Setter Property="AllowDrop"
                Value="true" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="FontSize"
                Value="15" />
    </Style>
</ResourceDictionary>